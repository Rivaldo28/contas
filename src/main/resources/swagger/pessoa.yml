openapi: 3.0.3
info:
  title: API de Pessoa
  description: API para gerenciar pessoas
  version: 1.0.0

servers:
  - url: http://localhost:8080/api/pessoa
    description: Servidor local
  - url: https://api.exemplo.com/pessoa
    description: Servidor de produção

tags:
  - name: Pessoa
    description: Recurso de gerenciamento de pessoas

paths:
  /pessoas:
    get:
      tags:
        - Pessoa
      summary: Listar pessoas
      description: Listagem de todas as pessoas cadastradas com suporte a paginação
      operationId: listarPessoas
      parameters:
        - name: nome
          in: query
          required: false
          description: Filtrar por nome
          schema:
            type: string
        - name: ativo
          in: query
          required: false
          description: Filtrar por status ativo
          schema:
            type: boolean
        - name: page
          in: query
          required: false
          description: Número da página
          schema:
            type: integer
            example: 0
        - name: size
          in: query
          required: false
          description: Tamanho da página
          schema:
            type: integer
            example: 20
      responses:
        '200':
          description: Lista de pessoas paginada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListaPessoasResponse'
              examples:
                exemplo:
                  value:
                    totalElements: 100
                    totalPages: 5
                    first: true
                    last: false
                    empty: false
                    pageable:
                      pageNumber: 0
                      pageSize: 20
                      offset: 0
                      paged: true
                      unpaged: false
                    content:
                      - id: 1
                        nome: "João Silva"
                        ativo: true
                        endereco:
                          rua: "Rua A"
                          numero: "123"
                      - id: 2
                        nome: "Maria Oliveira"
                        ativo: true
                        endereco:
                          rua: "Rua B"
                          numero: "456"
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    post:
      tags:
        - Pessoa
      summary: Adicionar uma pessoa
      description: Criação de uma nova pessoa
      operationId: adicionarPessoa
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PessoaDTO'
      responses:
        '201':
          description: Pessoa adicionada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PessoaDTO'
        '400':
          description: Requisição inválida
        '500':
          description: Erro interno do servidor

  /pessoas/{id}:
    get:
      tags:
        - Pessoa
      summary: Obter uma pessoa
      description: Obtém uma pessoa específica com base no ID fornecido
      operationId: obterPessoa
      parameters:
        - name: id
          in: path
          required: true
          description: ID da pessoa
          schema:
            type: integer
      responses:
        '200':
          description: Pessoa encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PessoaDTO'
        '404':
          description: Pessoa não encontrada
        '500':
          description: Erro interno do servidor

    put:
      tags:
        - Pessoa
      summary: Atualizar uma pessoa
      description: Atualização dos atributos de uma pessoa existente com base no ID fornecido
      operationId: atualizarPessoa
      parameters:
        - name: id
          in: path
          required: true
          description: ID da pessoa
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PessoaDTO'
      responses:
        '200':
          description: Pessoa atualizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PessoaDTO'
        '400':
          description: Requisição inválida
        '404':
          description: Pessoa não encontrada
        '500':
          description: Erro interno do servidor

    delete:
      tags:
        - Pessoa
      summary: Remover uma pessoa
      description: Remove uma pessoa específica com base no ID fornecido
      operationId: removerPessoa
      parameters:
        - name: id
          in: path
          required: true
          description: ID da pessoa
          schema:
            type: integer
      responses:
        '204':
          description: Pessoa removida com sucesso
        '404':
          description: Pessoa não encontrada
        '500':
          description: Erro interno do servidor

components:
  schemas:
    PessoaDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        ativo:
          type: boolean
        endereco:
          $ref: './endereco.yml#/components/schemas/EnderecoDTO'
      required:
        - nome
        - ativo
        - endereco

    ListaPessoasResponse:
      type: object
      properties:
        totalElements:
          type: integer
          minimum: 0
          description: Número total de elementos
          example: 100
        totalPages:
          type: integer
          minimum: 1
          description: Número total de páginas
          example: 5
        first:
          type: boolean
          description: Indica se é a primeira página
          example: true
        last:
          type: boolean
          description: Indica se é a última página
          example: false
        empty:
          type: boolean
          description: Indica se a página está vazia
          example: false
        pageable:
          $ref: '#/components/schemas/Pageable'
        content:
          type: array
          items:
            $ref: '#/components/schemas/PessoaDTO'

    Pageable:
      type: object
      properties:
        pageNumber:
          type: integer
          description: Número da página
          example: 0
        pageSize:
          type: integer
          description: Tamanho da página
          example: 20
        offset:
          type: integer
          description: Deslocamento
          example: 0
        paged:
          type: boolean
          description: Indica se é paginado
          example: true
        unpaged:
          type: boolean
          description: Indica se não é paginado
          example: false
