plugins {
	id 'java'
	id 'idea'
	id 'jacoco'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.sonarqube' version '5.1.0.4882'
	id 'org.openapi.generator' version '7.2.0'
}

group = 'com.grandle'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

tasks.withType(JavaCompile).configureEach { options.encoding = 'UTF-8' }
tasks.withType(JavaExec).configureEach { defaultCharacterEncoding = 'UTF-8' }
tasks.withType(Javadoc).configureEach { options.encoding = 'UTF-8' }
tasks.withType(Test).configureEach { defaultCharacterEncoding = 'UTF-8' }

repositories {
	mavenLocal()
	mavenCentral()
}

configurations {
	compileOnly { extendsFrom annotationProcessor }
}

dependencies {
	implementation platform('org.springframework.boot:spring-boot-dependencies:3.3.5')
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

	// Dependências de segurança
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
//	implementation 'org.springframework.security:spring-security-oauth2-jose'

	// Dependências para integração com JWT
//	implementation 'org.springframework.security:spring-security-oauth2-resource-server'
//	implementation 'org.springframework.security:spring-security-web'

	implementation 'javax.servlet:javax.servlet-api:4.0.1'
	implementation 'org.hibernate.validator:hibernate-validator:6.2.0.Final'
	implementation 'javax.validation:validation-api:2.0.1.Final'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	// Se preferir usar Jakarta, descomente a linha abaixo
	// implementation 'jakarta.annotation:jakarta.annotation-api:2.0.0'

	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation 'org.keycloak:keycloak-spring-boot-starter:24.0.4'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.postgresql:postgresql'
	implementation 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.mockito:mockito-junit-jupiter'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.hibernate:hibernate-core:6.6.1.Final'
	annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen:6.6.1.Final'
}

jar {
	archiveBaseName = 'contas'
	archiveVersion = ''
}

bootJar {
	archiveFileName = 'contas'
}

springBoot { buildInfo() }

apply from: 'openapi.gradle'

sourceSets {
	generated {
		java {
			srcDir file("${buildDir}/generated/sources/annotationProcessor/java/main")
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.generatedSourceOutputDirectory = layout.buildDirectory.dir("generated/sources/annotationProcessor/java/main").get().asFile
}

idea {
	module {
		sourceDirs += layout.buildDirectory.dir("generated/sources/annotationProcessor/java/main").get().asFile
		generatedSourceDirs += layout.buildDirectory.dir("generated/sources/annotationProcessor/java/main").get().asFile
	}
}
